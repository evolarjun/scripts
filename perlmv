#!/usr/bin/perl
# perlmv: renames files according to the expr given on the command line.
# The expr will usually be a 's' or 'y' command, but can be any valid
# perl command if it makes sense. Takes a list of files to work on or
# defaults to '*' in the current directory.
# e.g.
#       perlmv 's/\.flip$/.flop/'       # rename *.flip to *.flop
#       perlmv s/flip/flop/             # rename *flip* to *flop*
#       perlmv 's/^s\.(.*)/$1.X/'       # switch sccs filenames around
#       perlmv 's/$/.orig/' */*.[ch]    # add .orig to your source files in */
#       perlmv 'y/A-Z/a-z/'             # lowercase all filenames in .
#       perlmv 'y/A-Z/a-z/ if -B'       # same, but just binaries!
#       perlmv chop *~                  # restore all ~ backup files

use Getopt::Std;
my ($subst, $name);

if (!&getopts("nfq") || $#ARGV == -1) {
    die "Usage: perlmv [-fnq] <perl expression> [file file...]
-f   : Force the new filename even if it exists already
-n   : Just print what would happen, but don't do the command
-q   : Don't print the files as they are renamed
e.g. : perlmv  's/\.c/.c.old/' *
       perlmv -q 'y/A-Z/a-z/' *\n";
}

$subst = shift;                 # Get perl command to work on
@ARGV = <*> if $#ARGV < 0;      # Default to complete directory

foreach $name (@ARGV) {
    $_ = $name;
    eval "$subst;";
    die $@ if $@;
    if (-e $_ && !$opt_f) {     # skip the file unless asked to overwrite
        warn "$_ already exists so not overwriting use -f to overwrite\n";
        next;
    }
    mext if $_ eq $name;
    if ($opt_n) {
        print "mv $name $_\n";
        next;
    }
    print "mv $name $_\n" if !$opt_q;
    rename($name,$_) or warn "Can't rename $name to $_, $!\n";
}


